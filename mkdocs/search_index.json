{
    "docs": [
        {
            "location": "/",
            "text": "Texture Smith Docs\n\n\nTexture Smith is a texture creation program built for \nUnity\n capable of creating PBR textures in editor or during runtime.\n\n\nClick \nhere\n for a guide to getting started.\n\n\nFeatures\n\n\n\n\nFast enough for real time use. (Depending on texture size + count.)\n\n\nMultiple intuitive painting techiques like \nprojection, uv, and distance\n.\n\n\nShader agnostic so WYSIWYG.\n\n\nHeightblending. (Optional.)\n\n\nBuilt in \nProceduralMaterial support\n.\n\n\nBuilt in \nTextMesh Pro support\n.\n\n\nUse as many brushes as you want.\n\n\n\n\nPotential Uses\n\n\n\n\nTexture creation.\n\n\nCharacter creator system.\n\n\nPainting programs.\n\n\nProcedural texture generation.\n\n\nRuntime effects like blood, dirt, or explosions.\n\n\n\n\nCaution\n\n\nThe techniques wont work as well if your mesh shares uvs. For instance every face of the built in Unity cube has the same uvs, so you would only be able to paint to one face.",
            "title": "Home"
        },
        {
            "location": "/#texture-smith-docs",
            "text": "Texture Smith is a texture creation program built for  Unity  capable of creating PBR textures in editor or during runtime.  Click  here  for a guide to getting started.",
            "title": "Texture Smith Docs"
        },
        {
            "location": "/#features",
            "text": "Fast enough for real time use. (Depending on texture size + count.)  Multiple intuitive painting techiques like  projection, uv, and distance .  Shader agnostic so WYSIWYG.  Heightblending. (Optional.)  Built in  ProceduralMaterial support .  Built in  TextMesh Pro support .  Use as many brushes as you want.",
            "title": "Features"
        },
        {
            "location": "/#potential-uses",
            "text": "Texture creation.  Character creator system.  Painting programs.  Procedural texture generation.  Runtime effects like blood, dirt, or explosions.",
            "title": "Potential Uses"
        },
        {
            "location": "/#caution",
            "text": "The techniques wont work as well if your mesh shares uvs. For instance every face of the built in Unity cube has the same uvs, so you would only be able to paint to one face.",
            "title": "Caution"
        },
        {
            "location": "/gettingstarted/",
            "text": "Getting started\n\n\nThis will go over creating a \nBaker\n, a \nBrush\n, baking the textures and exporting them. I'm using the Unity standard assets from \nhere\n.\n\n\nBaker\n\n\nAdd the Baker component to the root of the \nGameObject\n you want to paint.\n\n\n\n\n\n\n\n\nA \nBakerMaterial\n is needed for any \nMaterial\n you'll be working with. These direct the \nBaker\n on how to treat the \nMaterial\n's textures. Click \nCreate BakerMaterial\n to automatically create one.\n\n\n\n\n\n\n\nNote that for a \nRenderer\n the \nMaterial\n list is basically a submesh list. Each \nMaterial\n is used to render that specific submesh.\n\n\nTargets\n\n\nSelect the submeshes you want to paint to. It's ideal that you give each one a unique name.\n\n\n\n\n\n\n\n\nClick \nHide\n to toggle submesh visibility so you know what it is.\n\n\n\n\n\n\n\nSince the snowboard mesh on Ethan's back uses a different set of textures you must mark it with a different \nBaker Set\n.\n\n\n\n\n\n\n\n\nOutputs\n\n\nSelect \nOutputs\n in the toolbar.\n\n\n\n\n\n\n\n\nSince I want to paint to the Diffuse, Normal, and Metal map, I'll click \nAdd Output\n 3 times, for both \nBaker Set\ns. Most things will be set up automatically though I'm going to set the \nDefault texture size\n to 2048. For more info on \nOutputs\n click \nhere\n.\n\n\n\n\n\n\n\nBrushes\n\n\nSelect \nBrushes\n in the toolbar.\n\n\n\n\n\n\n\n\nClick the \nDefault\n button to create a brush with the default set up. Then click \nSelect Brush\n.\n\n\nBrush\n\n\nYou'll see a list of all paintable submeshes. I just want this \nBrush\n to paint to the Skin submesh.\n\n\n\n\n\n\n\nTextures\n\n\nClick \nTextures\n. The \nBrush\n can get textures from multiple sources, typically the \nBrushTextures\n component. I clicked \nAdd Texture\n three times, and input a Diffuse, Normal, and Metal zombie texture.\n\n\n\n\n\n\n\n\nBefore tweaking any settings, let's position the \nBrush\n. Think of it as a projector, painting in the direction it's aiming. The \nx\n and \ny\n scale is the size, \nz\n scale is the distance it will reach.\n\n\n\n\n\n\nNow that it's in position, click \nBake\n to preview. Click \nRevert\n to reset all textures and materials.\n\n\n\n\n\n\n\n\nThe hard straight edges look unnatural, so we will add a mask.\n\n\nMask\n\n\nYou can use a texture or you can create a \nMaskSet\n from an .abr file (Photoshop) or .gbr files (Gimp). I got some Gimp brushes from \nhere\n, and put them in a folder any where in the project. On the Unity toolbar select \nTexture Smith/Create/Mask From Brushes\n and create a set.\n\n\n\n\n\n\n\n\nNow select the \nBrush\n and the \nMask\n toolbar. Set \nMask Set\n to the created set, and select one.\n\n\n\n\n\n\n\n\nExport\n\n\nSelect the \nBaker\n and the \nSettings\n toolbar.\nClick \n...\n and set a folder to export to. Then click \nExport\n.",
            "title": "Getting Started"
        },
        {
            "location": "/gettingstarted/#getting-started",
            "text": "This will go over creating a  Baker , a  Brush , baking the textures and exporting them. I'm using the Unity standard assets from  here .",
            "title": "Getting started"
        },
        {
            "location": "/gettingstarted/#baker",
            "text": "Add the Baker component to the root of the  GameObject  you want to paint.     A  BakerMaterial  is needed for any  Material  you'll be working with. These direct the  Baker  on how to treat the  Material 's textures. Click  Create BakerMaterial  to automatically create one.    \nNote that for a  Renderer  the  Material  list is basically a submesh list. Each  Material  is used to render that specific submesh.",
            "title": "Baker"
        },
        {
            "location": "/gettingstarted/#targets",
            "text": "Select the submeshes you want to paint to. It's ideal that you give each one a unique name.     Click  Hide  to toggle submesh visibility so you know what it is.    Since the snowboard mesh on Ethan's back uses a different set of textures you must mark it with a different  Baker Set .",
            "title": "Targets"
        },
        {
            "location": "/gettingstarted/#outputs",
            "text": "Select  Outputs  in the toolbar.     Since I want to paint to the Diffuse, Normal, and Metal map, I'll click  Add Output  3 times, for both  Baker Set s. Most things will be set up automatically though I'm going to set the  Default texture size  to 2048. For more info on  Outputs  click  here .",
            "title": "Outputs"
        },
        {
            "location": "/gettingstarted/#brushes",
            "text": "Select  Brushes  in the toolbar.     Click the  Default  button to create a brush with the default set up. Then click  Select Brush .",
            "title": "Brushes"
        },
        {
            "location": "/gettingstarted/#brush",
            "text": "You'll see a list of all paintable submeshes. I just want this  Brush  to paint to the Skin submesh.",
            "title": "Brush"
        },
        {
            "location": "/gettingstarted/#textures",
            "text": "Click  Textures . The  Brush  can get textures from multiple sources, typically the  BrushTextures  component. I clicked  Add Texture  three times, and input a Diffuse, Normal, and Metal zombie texture.     Before tweaking any settings, let's position the  Brush . Think of it as a projector, painting in the direction it's aiming. The  x  and  y  scale is the size,  z  scale is the distance it will reach.   \nNow that it's in position, click  Bake  to preview. Click  Revert  to reset all textures and materials.     The hard straight edges look unnatural, so we will add a mask.",
            "title": "Textures"
        },
        {
            "location": "/gettingstarted/#mask",
            "text": "You can use a texture or you can create a  MaskSet  from an .abr file (Photoshop) or .gbr files (Gimp). I got some Gimp brushes from  here , and put them in a folder any where in the project. On the Unity toolbar select  Texture Smith/Create/Mask From Brushes  and create a set.     Now select the  Brush  and the  Mask  toolbar. Set  Mask Set  to the created set, and select one.",
            "title": "Mask"
        },
        {
            "location": "/gettingstarted/#export",
            "text": "Select the  Baker  and the  Settings  toolbar.\nClick  ...  and set a folder to export to. Then click  Export .",
            "title": "Export"
        },
        {
            "location": "/baker/",
            "text": "Targets\n\n\nThe submeshes you want to target.\nGet started \nhere\n.\n\n\nOutputs\n\n\nThe textures to output. More info \nhere\n.\n\n\nBrushes\n\n\nList of brushes targeting submeshes in this \nBaker\n.\n\n\nSettings\n\n\nExport Settings\n\nExport settings deal with exporting all the textures. Covered in \nGetting Started\n.\n\n\nShader Features\n\n\nMask Blending\n enables the use of mask textures (enabled by default) and \nHeight Blending\n enables the use of height blending textures (enabled by default). But they come at a small performance cost. With \nMask Blending\n and \nHeight Blending\n enabled, 4 brushes will be painted per pass. With only one enabled 7 brushes will be painted per pass, and with neither enabled 14 brushes will be painted per pass.\n\n\nWrap UV\n\nJust leave this disabled and ignore it. In a rare event a submesh might have uv's that are outside the normal 0-1 range. Enabling this will fix this, so textures can generate properly.\n\n\nOn brush settings changed\n\nWhen you modify brush settings or move a brush around it is nice to see the effects instantly, without having to click Bake all the time. Use this drop down to determine what you want to happen when brush changes are made.\n\n\n\n\n\n\n\nBaking API\n\n\nBake();                     // Bake all sets.\nBake(BakeSet.BakeSet1);     // Just bake set 1.\n\nRevertTextures();   // Use the original input textures.\nRevertMaterials();  // Use the original materials. (Only necesarry if you are in preview mode.)\nRevert();           // Revert textures & materials.\nUseBakedTextures(); // Use output textures.\n\nClearAll();         // Mark textures to be cleared. The effect will only be visible after Bake is called.\n\nExport();                   // Will export everything to exportPath.\nExport(BakeSet.BakeSet1);   // Will export set 1.",
            "title": "Baker"
        },
        {
            "location": "/baker/#targets",
            "text": "The submeshes you want to target.\nGet started  here .",
            "title": "Targets"
        },
        {
            "location": "/baker/#outputs",
            "text": "The textures to output. More info  here .",
            "title": "Outputs"
        },
        {
            "location": "/baker/#brushes",
            "text": "List of brushes targeting submeshes in this  Baker .",
            "title": "Brushes"
        },
        {
            "location": "/baker/#settings",
            "text": "Export Settings \nExport settings deal with exporting all the textures. Covered in  Getting Started .  Shader Features  Mask Blending  enables the use of mask textures (enabled by default) and  Height Blending  enables the use of height blending textures (enabled by default). But they come at a small performance cost. With  Mask Blending  and  Height Blending  enabled, 4 brushes will be painted per pass. With only one enabled 7 brushes will be painted per pass, and with neither enabled 14 brushes will be painted per pass.  Wrap UV \nJust leave this disabled and ignore it. In a rare event a submesh might have uv's that are outside the normal 0-1 range. Enabling this will fix this, so textures can generate properly.  On brush settings changed \nWhen you modify brush settings or move a brush around it is nice to see the effects instantly, without having to click Bake all the time. Use this drop down to determine what you want to happen when brush changes are made.",
            "title": "Settings"
        },
        {
            "location": "/baker/#baking-api",
            "text": "Bake();                     // Bake all sets.\nBake(BakeSet.BakeSet1);     // Just bake set 1.\n\nRevertTextures();   // Use the original input textures.\nRevertMaterials();  // Use the original materials. (Only necesarry if you are in preview mode.)\nRevert();           // Revert textures & materials.\nUseBakedTextures(); // Use output textures.\n\nClearAll();         // Mark textures to be cleared. The effect will only be visible after Bake is called.\n\nExport();                   // Will export everything to exportPath.\nExport(BakeSet.BakeSet1);   // Will export set 1.",
            "title": "Baking API"
        },
        {
            "location": "/brush/",
            "text": "Targets\n\n\nSubmeshes available to paint to. If there are none, your scene needs a \nBaker\n component. Read \nGetting Started\n for info.\n\n\nTextures\n\n\nTexture settings like tint color and normal strength. If there are no textures you need a \nBrushTexture\n component.\n\n\nUV\n\n\nUV transform settings. More info \nhere\n.\n\n\nMask\n\n\nBrush mask. Requires \nMask Blending\n to be enabled in one of the targeted \nBakers\n. More info \nhere\n.\n\n\nSettings\n\n\n\n\nPriority:\n Used to sort brushes before painting. Change it to put the brush above/below others.\n\n\nMethod:\n How the texture is painted. More info \nhere\n.\n\n\nProjection (default):\n Works similar to the orthographic projector in Unity. Just aim and resize.\n\n\nUV:\n Select a UV rectangle to paint in.\n\n\nDistance:\n Paints based on distance to mesh.\n\n\n\n\n\n\nMax Angle:\n Limit painting based on the brushes angle and the normal of the mesh. Good for snow/dust effects, or just making sure you only paint faces that are facing the brush.\n\n\nAngle Fade:\n If \nMax Angle\n less than 1 this will fade it. (Beta.)\n\n\n\n\nBrush API\n\n\nAddTarget(submeshName);     // Target the first submesh found with the given name.\nRemoveTarget(submeshName);  // Stop targeting first submesh found with the given name.\nIsTargeting(submeshName);   // Returns true if brush is targeting.\nRemoveAllTargets();\n\n// If the Brush's BrushTextures component has multiple textures, these methods can swap them.\nNextStyle();\nPreviousStyle();\nSelectStyle(styleIndex);\nSelectStyle(styleName);",
            "title": "Brush"
        },
        {
            "location": "/brush/#targets",
            "text": "Submeshes available to paint to. If there are none, your scene needs a  Baker  component. Read  Getting Started  for info.",
            "title": "Targets"
        },
        {
            "location": "/brush/#textures",
            "text": "Texture settings like tint color and normal strength. If there are no textures you need a  BrushTexture  component.",
            "title": "Textures"
        },
        {
            "location": "/brush/#uv",
            "text": "UV transform settings. More info  here .",
            "title": "UV"
        },
        {
            "location": "/brush/#mask",
            "text": "Brush mask. Requires  Mask Blending  to be enabled in one of the targeted  Bakers . More info  here .",
            "title": "Mask"
        },
        {
            "location": "/brush/#settings",
            "text": "Priority:  Used to sort brushes before painting. Change it to put the brush above/below others.  Method:  How the texture is painted. More info  here .  Projection (default):  Works similar to the orthographic projector in Unity. Just aim and resize.  UV:  Select a UV rectangle to paint in.  Distance:  Paints based on distance to mesh.    Max Angle:  Limit painting based on the brushes angle and the normal of the mesh. Good for snow/dust effects, or just making sure you only paint faces that are facing the brush.  Angle Fade:  If  Max Angle  less than 1 this will fade it. (Beta.)",
            "title": "Settings"
        },
        {
            "location": "/brush/#brush-api",
            "text": "AddTarget(submeshName);     // Target the first submesh found with the given name.\nRemoveTarget(submeshName);  // Stop targeting first submesh found with the given name.\nIsTargeting(submeshName);   // Returns true if brush is targeting.\nRemoveAllTargets();\n\n// If the Brush's BrushTextures component has multiple textures, these methods can swap them.\nNextStyle();\nPreviousStyle();\nSelectStyle(styleIndex);\nSelectStyle(styleName);",
            "title": "Brush API"
        },
        {
            "location": "/outputs/",
            "text": "Outputs\n are the textures that get created and applied to your materials.\n\n\nEnable/Disable\n\n\nWhen calling baker.Bake(), all enabled outputs will be painted to. Disable this to prevent any more changes.\n\n\n\n\n\n\n\nUsage\n\n\nHow this texture should be used by \nMaterials\n. For more info on usages click \nhere\n.\n\n\n\n\n\n\n\nRemove\n\n\nRemove this output.\n\n\n\n\n\n\n\nInput Texture\n\n\nThe base input texture that will be painted to. It will initialize with a texture from the \nBakerMaterial\n, though you can change it if you like.\n\n\n\n\n\n\n\nSize\n\n\nBy default outputs will use the \nDefault texture size\n, but you can change this for individual textures. Smaller textures generate faster, so you may like to downsize while designing things, and then upsize before you export.\n\n\n\n\n\n\n\nClear\n\n\nWhen enabled this will reset the texture every time Bake is called. Disabling it will give you a paint like effect.\n\n\n\n\n\n\n\nPost Processing\n\n\nA material used for processing the texture after all brushes have been painted to it. Post processing isn't mandatory, though it does fix seams and fills in blank space with the input texture. For Normal maps it will pack the normals, so if you are using Standard shaders this should be enabled.",
            "title": "Outputs"
        },
        {
            "location": "/outputs/#enabledisable",
            "text": "When calling baker.Bake(), all enabled outputs will be painted to. Disable this to prevent any more changes.",
            "title": "Enable/Disable"
        },
        {
            "location": "/outputs/#usage",
            "text": "How this texture should be used by  Materials . For more info on usages click  here .",
            "title": "Usage"
        },
        {
            "location": "/outputs/#remove",
            "text": "Remove this output.",
            "title": "Remove"
        },
        {
            "location": "/outputs/#input-texture",
            "text": "The base input texture that will be painted to. It will initialize with a texture from the  BakerMaterial , though you can change it if you like.",
            "title": "Input Texture"
        },
        {
            "location": "/outputs/#size",
            "text": "By default outputs will use the  Default texture size , but you can change this for individual textures. Smaller textures generate faster, so you may like to downsize while designing things, and then upsize before you export.",
            "title": "Size"
        },
        {
            "location": "/outputs/#clear",
            "text": "When enabled this will reset the texture every time Bake is called. Disabling it will give you a paint like effect.",
            "title": "Clear"
        },
        {
            "location": "/outputs/#post-processing",
            "text": "A material used for processing the texture after all brushes have been painted to it. Post processing isn't mandatory, though it does fix seams and fills in blank space with the input texture. For Normal maps it will pack the normals, so if you are using Standard shaders this should be enabled.",
            "title": "Post Processing"
        },
        {
            "location": "/uses/",
            "text": "Texture Uses\n\n\nTextures are asigned a use so that the processing shaders know how to treat them. Some uses are more supported than others, but I'm working on getting support for as many different textures as I can.\n\n\nMost support\n\n\nBaseColor\n\n\nUsed for albedo, diffuse, or any kind of effects.\n\n\nSupported\n\n\nNormal\n\n\nNormals maps have a lot of tricks to work around. Currently Texture Smith requires packed Normal textures. They are unpacked for painting and then repacked in post processing. If your shader does not need packed normals, it is easy to disable this in post processing. When textures are saved to file they are first unpacked, so that Unity can use it's platform specific packing when you mark it as a Normal map.\n\n\nWhen blending normal maps, it's best to use the Height Blending option in the baker, and make sure your brush has a height texture.\n\n\nMetal\n\n\nMetal maps are largely supported, but there may be kinks in the way they are blended together.\n\n\nHeightmaps\n\n\n(Working on this.)\n\n\nSemi-supported\n\n\nSpecular\n\n\nMark it as a metal map, it will give decent results I think. (Working on this.)\n\n\nList of usage options\n\n\n\n\nBaseColor\n\n\nNormal\n\n\nMetal\n\n\nHeight\n\n\nSpecular\n\n\nOcclusion\n\n\nDetailMask\n\n\nEmissive\n\n\nOpacity\n\n\nRoughness\n\n\nSmoothness\n\n\nCustom1\n\n\nCustom2\n\n\nCustom3\n\n\nCustom4\n\n\nUnknown",
            "title": "Uses"
        },
        {
            "location": "/uses/#texture-uses",
            "text": "Textures are asigned a use so that the processing shaders know how to treat them. Some uses are more supported than others, but I'm working on getting support for as many different textures as I can.",
            "title": "Texture Uses"
        },
        {
            "location": "/uses/#most-support",
            "text": "",
            "title": "Most support"
        },
        {
            "location": "/uses/#basecolor",
            "text": "Used for albedo, diffuse, or any kind of effects.",
            "title": "BaseColor"
        },
        {
            "location": "/uses/#supported",
            "text": "",
            "title": "Supported"
        },
        {
            "location": "/uses/#normal",
            "text": "Normals maps have a lot of tricks to work around. Currently Texture Smith requires packed Normal textures. They are unpacked for painting and then repacked in post processing. If your shader does not need packed normals, it is easy to disable this in post processing. When textures are saved to file they are first unpacked, so that Unity can use it's platform specific packing when you mark it as a Normal map.  When blending normal maps, it's best to use the Height Blending option in the baker, and make sure your brush has a height texture.",
            "title": "Normal"
        },
        {
            "location": "/uses/#metal",
            "text": "Metal maps are largely supported, but there may be kinks in the way they are blended together.",
            "title": "Metal"
        },
        {
            "location": "/uses/#heightmaps",
            "text": "(Working on this.)",
            "title": "Heightmaps"
        },
        {
            "location": "/uses/#semi-supported",
            "text": "",
            "title": "Semi-supported"
        },
        {
            "location": "/uses/#specular",
            "text": "Mark it as a metal map, it will give decent results I think. (Working on this.)",
            "title": "Specular"
        },
        {
            "location": "/uses/#list-of-usage-options",
            "text": "BaseColor  Normal  Metal  Height  Specular  Occlusion  DetailMask  Emissive  Opacity  Roughness  Smoothness  Custom1  Custom2  Custom3  Custom4  Unknown",
            "title": "List of usage options"
        },
        {
            "location": "/texturesettings/",
            "text": "Check \nhere\n to see which usages Texture Smith has the most support for.\n\n\nBaseColor\n\n\n\n\nTint & Alpha:\n Modify the colors/alpha.\n\n\nMultiply RGB:\n Blend RGB with underlying color.\n\n\nMultiply A:\n Blend alpha with underlying alpha. Good for semi transparent textures.\n\n\n\n\nNormal\n\n\n\n\nRotation Mode:\n\n\nAuto (default):\n Automatically rotates normals based on brush rotation.\n\n\nStatic:\n No rotation.\n\n\n\n\n\n\nRotation:\n An offset.\n\n\nInvert (Button):\n Adds PI to the current normal rotation. Gives an 'inverted' effect.\n\n\nStrength:\n Increase the normal power.\n\n\nBlend:\n How much to blend with underlying normals.\n\n\n\n\nMetal\n\n\n\n\nMetallic:\n How metallic (reflective) the surface is.\n\n\nMetallic Blend:\n How much to blend with underlying metallic.\n\n\nSmoothness:\n The glossiness/roughness.\n\n\nSmoothness Blend:\n How much to blend with underlying smoothnrdd.\n\n\n\n\nHeight\n\n\n\n\nOffset:\n Increases or decreases the height.\n\n\nDepth:\n How it blends with the underlying height.",
            "title": "Texture Settings"
        },
        {
            "location": "/texturesettings/#basecolor",
            "text": "Tint & Alpha:  Modify the colors/alpha.  Multiply RGB:  Blend RGB with underlying color.  Multiply A:  Blend alpha with underlying alpha. Good for semi transparent textures.",
            "title": "BaseColor"
        },
        {
            "location": "/texturesettings/#normal",
            "text": "Rotation Mode:  Auto (default):  Automatically rotates normals based on brush rotation.  Static:  No rotation.    Rotation:  An offset.  Invert (Button):  Adds PI to the current normal rotation. Gives an 'inverted' effect.  Strength:  Increase the normal power.  Blend:  How much to blend with underlying normals.",
            "title": "Normal"
        },
        {
            "location": "/texturesettings/#metal",
            "text": "Metallic:  How metallic (reflective) the surface is.  Metallic Blend:  How much to blend with underlying metallic.  Smoothness:  The glossiness/roughness.  Smoothness Blend:  How much to blend with underlying smoothnrdd.",
            "title": "Metal"
        },
        {
            "location": "/texturesettings/#height",
            "text": "Offset:  Increases or decreases the height.  Depth:  How it blends with the underlying height.",
            "title": "Height"
        },
        {
            "location": "/uvsettings/",
            "text": "Space\n\n\nBrush (default):\n Uses the \nBrushes\n transform to position and scale the textures.\n\n\n\n\n\n\nYour browser does not support the video tag.\n\n\n\n\n\nUV:\n Uses the built in uv of the mesh. Create erasers by using this with the the objects base textures.\n\n\n\n\n\n\nYour browser does not support the video tag.\n\n\n\n\n\nVertex:\n Uses the vertices of the mesh, so regardless of the brush or object position it will give consistent results.\n\n\n\n\n\n\nYour browser does not support the video tag.\n\n\n\n\n\nWorld Vertex:\n Like vertex space, but uses the meshes world position as well.\n\n\n\n\n\n\nYour browser does not support the video tag.\n\n\n\nRotation\n\n\nRotate Mode\n\n\n\n\nStatic:\n Textures won't rotate with the \nBrush\n.\n\n\nBrush:\n Textures rotate with the \nBrush\n.\n\n\nBrush Inverted:\n Yeah. Don't know what purpose this could serve.\n\n\n\n\nOffset\n\nAn offset to the brush's rotation. Mostly added for when working with the \nuv method\n.\n\n\nTile & Offset\n\n\nTexture Smith will ignore a textures built in wrap mode and does it manually.\n\n\nWrap Mode\n\n\n\n\nClamp:\n Clamp.\n\n\nRepeat (default):\n Tile effect.\n\n\nMirror:\n Mirrors the tile every 2nd time.",
            "title": "UV Settings"
        },
        {
            "location": "/uvsettings/#space",
            "text": "Brush (default):  Uses the  Brushes  transform to position and scale the textures.   \nYour browser does not support the video tag.   UV:  Uses the built in uv of the mesh. Create erasers by using this with the the objects base textures.   \nYour browser does not support the video tag.   Vertex:  Uses the vertices of the mesh, so regardless of the brush or object position it will give consistent results.   \nYour browser does not support the video tag.   World Vertex:  Like vertex space, but uses the meshes world position as well.   \nYour browser does not support the video tag.",
            "title": "Space"
        },
        {
            "location": "/uvsettings/#rotation",
            "text": "Rotate Mode   Static:  Textures won't rotate with the  Brush .  Brush:  Textures rotate with the  Brush .  Brush Inverted:  Yeah. Don't know what purpose this could serve.   Offset \nAn offset to the brush's rotation. Mostly added for when working with the  uv method .",
            "title": "Rotation"
        },
        {
            "location": "/uvsettings/#tile-offset",
            "text": "Texture Smith will ignore a textures built in wrap mode and does it manually.",
            "title": "Tile &amp; Offset"
        },
        {
            "location": "/uvsettings/#wrap-mode",
            "text": "Clamp:  Clamp.  Repeat (default):  Tile effect.  Mirror:  Mirrors the tile every 2nd time.",
            "title": "Wrap Mode"
        },
        {
            "location": "/brushtextures/",
            "text": "Brush Textures\n\n\nThere are a number of way to get textures for the brush, including using Procedural Materials and TextMesh Pro text.\n\n\nBrush API\n\n\n// If a brush has multiple styles, these methods will cycle through them.\nbrush.NextStyle();\nbrush.PreviousStyle();\n\n// If there is a style with this name it will be set.\nbrush.SetStyle(styleName);\n\n\n\n\nBT_Default\n\n\nExplained in \ngetting started\n.\nJust click Add Texture and drop in your textures.\nMake sure they are marked for the appropriate usage.\n\n\nBT_Gradient\n\n\nCreates gradient textures. Very simple but it has a lot of uses, for instance, quickly generating textures. Or fake shadows.\n\n\nvar g = GetComponent<BT_Gradient>();\n\n// Set the gradient.\ng.SetGradient(gradient, radial);\n\n\n\n\nBT_ProcMat\n\n\nDesigned for Procedural Materials which I wrap in \nProcMat\n.\n\n\nThe brush will use the textures directly from the ProceduralMaterial, unless you choose to store them.\n\n\nClick RenderTexture to create copies of the procedural textures. Now you can have 2 brushes sharing the same ProceduralMaterial but still using different textures.\n\n\nClick Texture2D to create copies as texture2D. This is better when you are working in editor since Unity will wipe RenderTextures if you do things like save your scene or resize the inspector editor.\n\n\nDuring runtime it's probably better to store as RenderTexture since it's faster to copy to.\n\n\nvar pm = GetComponent<BT_ProcMat>();\n\n// List all property names.\nforeach(var name in pm.procMat.names)\n    Debug.Log(name);\n\n// You can modify procMat properties like:\npm[\"$randomseed\"].asFloat = Random.value * 100f;\n// ProceduralMaterial seed and output size have easy access variables.\npm.procMat.seed = Random.value * 100f;\npm.procMat.size = PowersOf2.p256;\n// To rebuild asynchonously:\npm.procMat.RebuildTextures();\n// Or instantly.\npm.procMat.RebuildTextures(true);\n\n\n\n\nBT_Share\n\n\nThis just uses the textures from another brush. So it saves on texture memory but you can still customize it with the regular brush options, like tint, alpha, offset.\n\n\nBT_TextureSet\n\n\nThis takes one or more \nTextureSet\ns.\n\n\nBT_Text (Requires TextMesh Pro)\n\n\nLets you create brushes from text. Use it to generate sports jersey names at runtime, or license plate numbers, or use dingbat fonts for easy tattoos, splats, signs. It's really fun to play around with. TMPros filter effects like glow & bevel work great too.\n\n\nTextMesh Pro is free now, and Unity will be officially supporting it soon.\n\n\nSetup\n\n\n\n\nInstall TextMesh Pro.\n\n\nGo to \nEditor > Project Settings > Player\n and in \nScript Define Symbols\n add \nTEXTMESHPRO\n.\n\n\nCreate a brush and add the BT_Text component and a TextMesh Pro component.\n\n\nEnter some text.\n\n\nSet the resolution (the width of the texture) higher = better quality = more memory.\n\n\nHit \nGenerate\n.\n\n\n\n\nAPI\n\n\nvar t = GetComponent<BT_Text>();\n\n// To set text.\nt.SetText(\"your text\");",
            "title": "BrushTextures"
        },
        {
            "location": "/brushtextures/#brush-textures",
            "text": "There are a number of way to get textures for the brush, including using Procedural Materials and TextMesh Pro text.",
            "title": "Brush Textures"
        },
        {
            "location": "/brushtextures/#brush-api",
            "text": "// If a brush has multiple styles, these methods will cycle through them.\nbrush.NextStyle();\nbrush.PreviousStyle();\n\n// If there is a style with this name it will be set.\nbrush.SetStyle(styleName);",
            "title": "Brush API"
        },
        {
            "location": "/brushtextures/#bt_default",
            "text": "Explained in  getting started .\nJust click Add Texture and drop in your textures.\nMake sure they are marked for the appropriate usage.",
            "title": "BT_Default"
        },
        {
            "location": "/brushtextures/#bt_gradient",
            "text": "Creates gradient textures. Very simple but it has a lot of uses, for instance, quickly generating textures. Or fake shadows.  var g = GetComponent<BT_Gradient>();\n\n// Set the gradient.\ng.SetGradient(gradient, radial);",
            "title": "BT_Gradient"
        },
        {
            "location": "/brushtextures/#bt_procmat",
            "text": "Designed for Procedural Materials which I wrap in  ProcMat .  The brush will use the textures directly from the ProceduralMaterial, unless you choose to store them.  Click RenderTexture to create copies of the procedural textures. Now you can have 2 brushes sharing the same ProceduralMaterial but still using different textures.  Click Texture2D to create copies as texture2D. This is better when you are working in editor since Unity will wipe RenderTextures if you do things like save your scene or resize the inspector editor.  During runtime it's probably better to store as RenderTexture since it's faster to copy to.  var pm = GetComponent<BT_ProcMat>();\n\n// List all property names.\nforeach(var name in pm.procMat.names)\n    Debug.Log(name);\n\n// You can modify procMat properties like:\npm[\"$randomseed\"].asFloat = Random.value * 100f;\n// ProceduralMaterial seed and output size have easy access variables.\npm.procMat.seed = Random.value * 100f;\npm.procMat.size = PowersOf2.p256;\n// To rebuild asynchonously:\npm.procMat.RebuildTextures();\n// Or instantly.\npm.procMat.RebuildTextures(true);",
            "title": "BT_ProcMat"
        },
        {
            "location": "/brushtextures/#bt_share",
            "text": "This just uses the textures from another brush. So it saves on texture memory but you can still customize it with the regular brush options, like tint, alpha, offset.",
            "title": "BT_Share"
        },
        {
            "location": "/brushtextures/#bt_textureset",
            "text": "This takes one or more  TextureSet s.",
            "title": "BT_TextureSet"
        },
        {
            "location": "/brushtextures/#bt_text-requires-textmesh-pro",
            "text": "Lets you create brushes from text. Use it to generate sports jersey names at runtime, or license plate numbers, or use dingbat fonts for easy tattoos, splats, signs. It's really fun to play around with. TMPros filter effects like glow & bevel work great too.  TextMesh Pro is free now, and Unity will be officially supporting it soon.",
            "title": "BT_Text (Requires TextMesh Pro)"
        },
        {
            "location": "/brushtextures/#setup",
            "text": "Install TextMesh Pro.  Go to  Editor > Project Settings > Player  and in  Script Define Symbols  add  TEXTMESHPRO .  Create a brush and add the BT_Text component and a TextMesh Pro component.  Enter some text.  Set the resolution (the width of the texture) higher = better quality = more memory.  Hit  Generate .",
            "title": "Setup"
        },
        {
            "location": "/brushtextures/#api",
            "text": "var t = GetComponent<BT_Text>();\n\n// To set text.\nt.SetText(\"your text\");",
            "title": "API"
        },
        {
            "location": "/paintingmethods/",
            "text": "Projection Method\n\n\nThe projection method works the way a projector or directional light might, you point in the direction you want, adjust the size, and depth.\n\n\nUV Method\n\n\nAside from the projection method, \nBrushes\n can be positioned by a uv boundary instead. Obviously this technique wont work as well near seams, but it's useful for more careful placement.\n\n\nIn the \nBrushes\n toolbar select \nSettings\n, set \nMethod\n to uv. Click \nView UV Editor\n to bring up the editor.\n\n\n\n\nControls\n\n\n\n\nMouse Wheel Click:\n Grab the workspace.\n\n\nMouse Wheel Zoom:\n Zoom in and out.\n\n\nLeft Click:\n Grab an edge nib or the full bounds.\n\n\nMouse Move:\n Move the workspace or edge nib.\n\n\n\n\nSome Brush settings will be disabled but most wont be.\n\n\nDistance\n\n\nPaints based on distance. This is experimental and under developed.",
            "title": "Painting Methods"
        },
        {
            "location": "/paintingmethods/#projection-method",
            "text": "The projection method works the way a projector or directional light might, you point in the direction you want, adjust the size, and depth.",
            "title": "Projection Method"
        },
        {
            "location": "/paintingmethods/#uv-method",
            "text": "Aside from the projection method,  Brushes  can be positioned by a uv boundary instead. Obviously this technique wont work as well near seams, but it's useful for more careful placement.  In the  Brushes  toolbar select  Settings , set  Method  to uv. Click  View UV Editor  to bring up the editor.",
            "title": "UV Method"
        },
        {
            "location": "/paintingmethods/#controls",
            "text": "Mouse Wheel Click:  Grab the workspace.  Mouse Wheel Zoom:  Zoom in and out.  Left Click:  Grab an edge nib or the full bounds.  Mouse Move:  Move the workspace or edge nib.   Some Brush settings will be disabled but most wont be.",
            "title": "Controls"
        },
        {
            "location": "/paintingmethods/#distance",
            "text": "Paints based on distance. This is experimental and under developed.",
            "title": "Distance"
        }
    ]
}